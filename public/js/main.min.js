(function () {
'use strict';

function __$styleInject(css, returnValue) {
  if (typeof document === 'undefined') {
    return returnValue;
  }
  css = css || '';
  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';
  if (style.styleSheet){
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
  head.appendChild(style);
  return returnValue;
}

__$styleInject("*,body{box-sizing:border-box;margin:0}body{padding:32px;padding:2rem;color:#444;font-family:sans-serif;font-size:18px;background-image:-webkit-linear-gradient(top,#efefff,#fff);background-image:linear-gradient(180deg,#efefff 0,#fff);background-repeat:no-repeat}body *+*{margin-top:16px;margin-top:1rem}h1{color:#111}.debug:before{content:\"Script Output:\";display:block;font-family:sans-serif;font-size:50%;letter-spacing:.1em;text-transform:uppercase}.debug__output{display:block;margin-top:4px;margin-top:.25rem;padding:16px;padding:1rem;background-color:#fff;border:1px solid #d0d0d0;font-size:80%}.credits{color:#a2a2a2;font-size:75%;text-align:center}.credits a{color:inherit}", undefined);

/**
 * Says hello.
 * @param  {String} name a name
 * @return {String}      a greeting for `name`
 */
function sayHelloTo(name) {
  var toSay = "Hello, " + name + "!";

  return toSay;
}

/**
 * Says goodbye.
 * @param  {String} name a name
 * @return {String}      a farewell for `name`
 */

/**
 * Adds all the values in an array.
 * @param  {Array} arr an array of numbers
 * @return {Number}    the sum of all the array values
 */
var addArray = function addArray(arr) {
  var result = arr.reduce(function (a, b) {
    return a + b;
  }, 0);

  return result;
};

var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

var browser$1 = pino;

var _console = commonjsGlobal.console || {};
function Pino() {}
Pino.prototype = _console;

function pino(opts) {
  opts = opts || {};
  var level = opts.level || 'info';
  var val = pino.levels.values[level];
  var logger = new Pino();
  if (!logger.log) logger.log = noop;

  set(logger, val, 'error', 'log'); // <-- must stay first
  set(logger, val, 'fatal', 'error');
  set(logger, val, 'warn', 'error');
  set(logger, val, 'info', 'log');
  set(logger, val, 'debug', 'log');
  set(logger, val, 'trace', 'log');

  logger.setMaxListeners = logger.getMaxListeners = logger.emit = logger.addListener = logger.on = logger.prependListener = logger.once = logger.prependOnceListener = logger.removeListener = logger.removeAllListeners = logger.listeners = logger.listenerCount = logger.eventNames = logger.write = logger.flush = noop;

  logger.child = function child(bindings) {
    if (!bindings) {
      throw new Error('missing bindings for child Pino');
    }
    function Child(parent) {
      this.error = bind(parent, bindings, 'error');
      this.fatal = bind(parent, bindings, 'fatal');
      this.warn = bind(parent, bindings, 'warn');
      this.info = bind(parent, bindings, 'info');
      this.debug = bind(parent, bindings, 'debug');
      this.trace = bind(parent, bindings, 'trace');
    }
    Child.prototype = this;
    return new Child(this);
  };
  logger.levels = pino.levels;
  return logger;
}

pino._Pino = Pino;
pino.LOG_VERSION = 1;

pino.levels = {
  values: {
    fatal: 60,
    error: 50,
    warn: 40,
    info: 30,
    debug: 20,
    trace: 10
  },
  labels: {
    '10': 'trace',
    '20': 'debug',
    '30': 'info',
    '40': 'warn',
    '50': 'error',
    '60': 'fatal'
  }
};

pino.stdSerializers = {
  req: mock,
  res: mock,
  err: mock
};

function bind(parent, bindings, level) {
  return function () {
    var args = new Array(1 + arguments.length);
    args[0] = bindings;
    for (var i = 1; i < args.length; i++) {
      args[i] = arguments[i - 1];
    }
    return parent[level].apply(null, args);
  };
}

function set(logger, val, level, fallback) {
  logger[level] = val > pino.levels.values[level] ? noop : logger[level] ? logger[level] : _console[fallback] || noop;
}

function mock() {
  return {};
}
function noop() {}

// Import syles (automatically injected into <head>)
// Import a couple modules for testing.
// Import a logger for easier debugging.
//import debug from 'debug';
//const log = debug('app:log');
var log = browser$1();

// The logger should only be disabled if weâ€™re not in production.
{

  // Enable the logger.
  //  debug.enable('*');
  log.info('Logging is enabled!');
  log.error('oh');
  // Enable LiveReload
  document.write('<script src="http://' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1"></' + 'script>');
}

// Run some functions from our imported modules.
var result1 = sayHelloTo('Jason');
var result2 = addArray([1, 2, 3, 4]);

// Print the results on the page.
var printTarget = document.getElementsByClassName('debug__output')[0];

printTarget.innerText = 'sayHelloTo(\'Jason\') => ' + result1 + '\n\n';
printTarget.innerText += 'addArray([1, 2, 3, 4]) => ' + result2;

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
